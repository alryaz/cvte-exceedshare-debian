name: Repackage UOS/Deepin packages

on:
  workflow_dispatch:

env:
  REPOSITORY_URL: "https://home-store-packages.uniontech.com/appstore"
  REPOSITORY_DIST: "eagle"
  PACKAGE_NAME: com.cvte.exceedshare

jobs:
  download-lists:
    runs-on: ubuntu-latest
    outputs:
      links: ${{ steps.links.outputs.links }}
    steps:
    - name: Download Release file
      run: |
        # Download the Release file
        curl -fsL -o Release "${{ env.REPOSITORY_URL }}/dists/${{ env.REPOSITORY_DIST }}/Release"
        
    - name: Parse package sources
      run: |
        grep -Eo '[^ ]+/Packages' Release | sort | uniq > Sources
        [ -s "Sources"] && ( echo "Sources not found" >&2; exit 1 )
        echo "Found sources:"
        cat Sources
        
    - name: Download package sources
      run: |
        curl -sL -o Packages --parallel --parallel-immediate $(sed -e 's!^!${{ env.REPOSITORY_URL }}/dists/${{ env.REPOSITORY_DIST }}/!g' Sources)

    - name: Store package laths
      id: links
      run: |
        # Capture the output of the grep command
        DEB_LINKS=$(grep -oE '[^ ]+${{ env.PACKAGE_NAME }}[^ ]+\.deb' Packages)

        # Convert the output to a JSON array
        DEB_LINKS_JSON=$(echo "$DEB_LINKS" | jq -R -s -c 'split("\n") | map(select(length > 0))')

        # Set the output
        echo "links=$DEB_LINKS_JSON" >> $GITHUB_OUTPUT

  handle-package:
    runs-on: ubuntu-latest
    needs: download-lists
    strategy:
      matrix:
        link: ${{ fromJSON(needs.download-lists.outputs.links) }}
    steps:
    - name: Store filename
      id: filename
      run: |
        echo "filename=$(basename "${{ matrix.link }}")" >> $GITHUB_OUTPUT
        
    - name: Download packages
      run: |
        curl -sL -o "${{ steps.filename.outputs.filename }}" "${{ env.REPOSITORY_URL }}/${{ matrix.link }}"

    - name: Store package version
      id: version
      run: |
        echo "version=$(dpkg-deb -f "${{ steps.filename.outputs.filename }}" Version)" >> $GITHUB_OUTPUT

    - name: Rebuild packages
      run: |
        # Extract package contents to temporary directory
        mkdir -p unpacked
        dpkg-deb -x "${{ steps.filename.outputs.filename }}" unpacked
        dpkg-deb --control "${{ steps.filename.outputs.filename }}" "unpacked/DEBIAN"
        
        # Remove obscure dependency
        sed -i '/deepin-elf-verify/d' "unpacked/DEBIAN/control"
        
        # Make desktop shortcut and icons
        (
            cd "unpacked/opt/apps/${{ env.PACKAGE_NAME }}/entries"
            find applications icons \
                -type f \
                -exec sh -c 'mkdir -p unpacked/usr/share/$(dirname "{}")"' \; \
                -exec ln -s "/opt/apps/${{ env.PACKAGE_NAME }}/entries/{}" "unpacked/usr/share/{}" \;
        )
        
        # Check if update-desktop-database trigger is present
        if ! grep -q 'update-desktop-database' "unpacked/DEBIAN/postinst"; then
            echo 'dpkg-trigger update-desktop-database' >> "unpacked/DEBIAN/postinst"
        fi
        
        # Rebuild package
        dpkg -b unpacked "${{ steps.filename.outputs.filename }}"

    - name: Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: "${{ env.PACKAGE_NAME }}-v${{ steps.version.outputs.version }}"
        files: "${{ steps.filename.outputs.filename }}"
